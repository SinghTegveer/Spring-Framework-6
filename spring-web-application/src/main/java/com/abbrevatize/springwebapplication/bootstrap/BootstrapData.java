package com.abbrevatize.springwebapplication.bootstrap;

import com.abbrevatize.springwebapplication.domain.Author;
import com.abbrevatize.springwebapplication.domain.Book;
import com.abbrevatize.springwebapplication.domain.Publisher;
import com.abbrevatize.springwebapplication.repositories.AuthorRepository;
import com.abbrevatize.springwebapplication.repositories.BookRepository;
import com.abbrevatize.springwebapplication.repositories.PublisherRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

// Class to initialize data in the application
@Component
public class BootstrapData implements CommandLineRunner {

    private final AuthorRepository authorRepository;
    private final BookRepository bookRepository;
    private final PublisherRepository publisherRepository;

    public BootstrapData(AuthorRepository authorRepository, BookRepository bookRepository, PublisherRepository publisherRepository) {
        this.authorRepository = authorRepository;
        this.bookRepository = bookRepository;
        this.publisherRepository = publisherRepository;
    }

    // If a command line runner type component is found on class path or within the Spring Boot context - execute run method
    @Override
    public void run(String... args) throws Exception {
        Author a1 = new Author();
        a1.setFirstName("Tegveer");
        a1.setLastName("Singh");

        Book b1 = new Book();
        b1.setTitle("Abbrevatize");
        b1.setIsbn("75410235");

        Author a2 = new Author();
        a2.setFirstName("Trimanpreet");
        a2.setLastName("Kaur");

        Book b2 = new Book();
        b2.setTitle("Chords");
        b2.setIsbn("45320211");

        Publisher p1 = new Publisher();
        p1.setPublisherName("Ontario Publishing");
        p1.setAddress("100 ABC Street");
        p1.setCity("Toronto");
        p1.setState("Ontario");
        p1.setZip("A1B 2C3");

        // Store the saved object values - These are finished objects returned as added - save in separate variables
        Author a1_saved = authorRepository.save(a1);
        Author a2_saved = authorRepository.save(a2);
        Book b1_saved = bookRepository.save(b1);
        Book b2_saved = bookRepository.save(b2);
        Publisher p1_saved = publisherRepository.save(p1);

        // The finished objects also have the IDs generated by the in memory database

        // Adding Book to Author
        a1_saved.getBooks().add(b1_saved);
        a2_saved.getBooks().add(b2_saved);
        // Adding Author to Book
        b1_saved.getAuthors().add(a1_saved);
        b2_saved.getAuthors().add(a2_saved);
        // Setting Publisher for Book
        b1_saved.setPublisher(p1);
        b2_saved.setPublisher(p1);

        // Persist the newly added values
        authorRepository.save(a1_saved);
        authorRepository.save(a2_saved);
        bookRepository.save(b1_saved);
        bookRepository.save(b2_saved);

        // Add logs to indicate we are executing the bootstrap method
        System.out.println("In Bootstrap method");
        System.out.println("Author Count: " + authorRepository.count());
        System.out.println("Book Count: " + bookRepository.count());
        System.out.println("Publisher Count: " + publisherRepository.count());
    }
}
